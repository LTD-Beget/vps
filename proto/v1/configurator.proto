syntax = "proto3";

package beget.vps.v1.configurator;

import "google/api/annotations.proto";
import "vps/proto/v1/structures.proto";

// Конфигуратор VPS
//
// Предоставляет метод получения кастомной конфигурации VPS
service ConfiguratorService {
  rpc getConfiguratorInfo(GetConfiguratorInfoRequest) returns (GetConfiguratorInfoResponse) {
    option (google.api.http) = {
      get: "/v1/vps/configurator"
    };
  }

  rpc calculate(CalculateRequest) returns (CalculateResponse) {
    option (google.api.http) = {
      post: "/v1/vps/configurator"
    };
  }
}

message GetConfiguratorInfoRequest {
}

message GetConfiguratorInfoResponse {
  structures.ConfiguratorSettings settings = 1;
  bool is_available = 2;
}

message CalculateRequest {
  structures.ConfigurationParams params = 1;
  string vps_id = 2;
}

message CalculateResponse {
  oneof result {
    Success success = 1;
    Error error = 2;
  }

  message Success {
    structures.ConfiguratorSettings settings = 1;
    structures.ConfigurationParams available_params = 2;
    double price_day = 3;
    double price_month = 4;
  }

  message Error {
    // Код ошибки
    Code code = 1;

    // Описание ошибки
    string message = 2;
  }
  enum Code {
    // Действие в данный момент недоступно
    TEMPORARILY_UNAVAILABLE = 0;
  }
}
