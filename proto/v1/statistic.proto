syntax = 'proto3';

package beget.vps.v1.statistic;

import "google/api/annotations.proto";

// Статистика по серверу
//
//
service StatisticService {
    // Получить статистику по использованию CPU для конкретной VPS
    rpc getCpu(GetCpuRequest) returns (GetCpuResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/cpu/{id}"
        };
    }

    // Получить статистику по использованию оперативной памяти для конкретной VPS
    rpc getMemory(GetMemoryRequest) returns (GetMemoryResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/memory/{id}"
        };
    }

    // Получить статистику о обращении к диску(чтение/запись) для конкретной VPS
    rpc getDisk(GetDiskRequest) returns (GetDiskResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/disk/{id}"
        };
    }

    // Получить статистику о использованном месте на диске для конкретной VPS
    rpc getDiskUsage(GetDiskUsageRequest) returns (GetDiskUsageResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/disk-usage/{id}"
        };
    }

    // Получить статистику о трафике для конкретной VPS
    rpc getNetwork(GetNetworkRequest) returns (GetNetworkResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/network/{id}"
        };
    }

    // Получить статистику о нагрузке на сервер
    rpc getLoadAverage(GetLoadAverageRequest) returns (GetLoadAverageResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/load-average/{id}"
        };
    }

    // Получить детальную статистику о использовании CPU для конкретной VPS
    rpc getCpuDetails(GetCpuDetailsRequest) returns (GetCpuDetailsResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/cpu-details/{id}"
        };
    }

    // Получить текущий список процессов на сервере
    rpc getProcessList(GetProcessListRequest) returns (GetProcessListResponse) {
        option (google.api.http) = {
            get: "/v1/vps/statistic/processes/{id}"
        };
    }
}

message GetCpuRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetCpuResponse {
    // Информация о использовании CPU
    SeriesData cpu = 2;
}

message GetMemoryRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetMemoryResponse {
    // Информация о использовании памяти
    SeriesData memory = 1;
}

message GetDiskRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetDiskResponse {
    // Чтение с диска
    SeriesData data_read = 1;

    // Запись на диск
    SeriesData data_write = 2;
}


message GetNetworkRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetNetworkResponse {
    // Входящий трафик
    SeriesData data_rx = 1;

    // Исходящий трафик
    SeriesData data_tx = 2;

    // Входящий трафик приватной сети
    SeriesData data_rx_private = 3;

    // Исходящий трафик приватной сети
    SeriesData data_tx_private = 4;
}

message GetDiskUsageRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetDiskUsageResponse {
    // Информация о использовании диска
    SeriesData disk_usage = 1;
}

message GetLoadAverageRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetLoadAverageResponse {
    // Дата
    repeated string date = 1;

    // Значение нагрузки за последнюю минуту
    repeated double la1 = 2;

    // Значение нагрузки за последние 5 минут
    repeated double la5 = 3;

    // Значение нагрузки за последние 15 минут
    repeated double la15 = 4;
}

message GetCpuDetailsRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Период(HOUR/DAY/WEEK)
    Period period = 2;
}

message GetCpuDetailsResponse {
    // Время конкретного момента в статистике
    repeated string date = 1;

    // Время, проведенное в пользовательском режиме
    repeated double user = 2;

    // Время, проведенное в пользовательском режиме с низким приоритетом
    repeated double nice = 3;

    // Время, проведенное в пространстве ядра
    repeated double system = 4;

    // Время бездействия
    repeated double idle = 5;

    // Время ожидания завершения задач ввода-вывода дисковой системы
    repeated double iowait = 6;

    // Время потраченное на прерывания
    repeated double irq = 7;

    // Время потраченное на программные прерывания
    repeated double softirq = 8;
}

message GetProcessListRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;
}

message GetProcessListResponse {
    oneof result {
        // Список процессов
        ProcessList processes = 1;

        // Ошибка при получении информации о процессах
        Error error = 2;
    }

    message ProcessList {
        // Информация о процессах
        repeated ProcessInfo process = 1;

        message ProcessInfo {
            // Идентификатор процесса
            uint32 pid = 1;

            // Приоритет процесса
            int32 nice = 2;

            // Размер использования виртуальной памяти в байтах
            uint64 virt = 3; // bytes

            // Размер использования памяти в байтах
            uint64 rss = 4; // bytes

            // Статус процесса
            string state = 5;

            // Процент использования процессора
            float cpu_percent = 6;

            // Процент использования оперативной памяти
            float mem_percent = 7;

            // Время работы процесса в секундах
            float time_running = 8; // seconds

            // Имя процесса
            string name = 9;

            // Пользователь из под которого работает процесс
            string user = 10;
        }
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение ошибки
        string message = 2;

        enum Code {
            // Внутренняя ошибка
            _ = 0;

            // Не удалось получить информацию из гостевого агента VPS
            GUEST_AGENT_UNAVAILABLE = 1;
        }
    }
}

message SeriesData {
    // Время конкретного момента в статистике
    repeated string date = 1;

    // Значение статистики
    repeated double value = 2;
}

// Период за который нужно получить статистику
enum Period {
    // Неизвестен
    UNKNOWN = 0;

    // Час
    HOUR = 1;

    // День
    DAY = 2;

    // Неделя
    WEEK = 3;

    // Месяц
    MONTH = 4;
}
