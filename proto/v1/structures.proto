syntax = 'proto3';

package beget.vps.v1.structures;

// Описание публичного ssh-ключа, добавленного пользователем в систему
message SshKeyInfo {
    // Идентификатор ключа
    uint32 id = 1;

    // Имя ключа (для удобства пользователя)
    string name = 2;

    // Отпечаток сохраненного публичного ключа
    string fingerprint = 3;
}

message IpInfo {
    // Основной IP-адрес VPS
    string ip = 1;

    // MAC-адрес
    string mac = 2;

    // Идентификатор VPS, к которому привязан дополнительный IP-адрес
    string vps_id = 3;
}

message AdditionalIpInfo {
    // Дополнительный IP-адрес, принадлежащий пользователю
    string ip = 1;

    // Идентификатор VPS, к которому привязан дополнительный IP-адрес
    string vps_id = 2;
}

message FileInfo {
    // Является ли файл символической ссылкой
    bool is_link = 1;

    // Является ли файл директорией
    bool is_dir = 2;

    // Название файла
    bytes name = 3;

    // Расширение файла, если оно есть
    bytes ext = 4;

    // Путь к файлу
    bytes path = 5;

    // Владелец файла
    string owner = 6;

    // Группа владельца
    string group = 7;

    // Размер файла в байтах
    uint64 size = 8;

    // Время изменения (unix timestamp)
    double mtime = 9;

    // Время изменения в читаемом виде
    string mtime_str = 10;

    // Права на файл, например, "777"
    string mode = 11;
}

message CopyInfo {
    // Идентификатор копии
    uint64 id = 1;

    // Идентификатор VPS (uuid)
    string vps_id = 6;

    // Имя VPS, с которого создавалась резервная копия
    string vps_name = 7;

    // Дата создания копии в RFC3339
    string date = 2;

    // Общий размер резервной копии в байтах
    uint64 size = 4;

    // Конфигурация, которая использовалась серверов в момент создания резервной копии
    Configuration configuration = 5;

    structures.InstalledSoftwareInfo installed_software = 8;

    message Configuration {
        // Количество ядер процессора, шт
        uint32 cpu_count = 1;

        // Объем дисковой квоты, Мб
        uint32 disk_size = 2;

        // Объем оперативной памяти, Мб
        uint32 memory = 3;
    }
}

message OrderInfo {
    // Идентификатор задания
    uint64 id = 1;

    // Идентификатор VPS (uuid)
    string vps_id = 2;

    // Имя сервера, на который выполнялось восстановление
    string vps_name = 11;

    // Тип задания
    OrderType type = 3;

    // Дата создания задания (RFC3339)
    string date_create = 4;

    // Дата завершения задания (RFC3339)
    string date_complete = 5;

    // Список путей для восстановления/скачивания
    repeated string path = 6;

    // Статус завершения
    OrderStatus status = 7;

    // Информация о соответствующей резервной копии
    CopyInfo copy_info = 8;

    // Операция производится без выключения VPS
    bool affect_live = 9;

    // Директория, в которую производилось восстановление (актуально для выборочного восстановления файлов)
    string target = 10;

    ErrorDetails error_details = 12;

    message ErrorDetails {
        oneof error {
            FileError file_error = 1;
        }

        message FileError {
            map<string, Code> error = 1; // <path, error_code>

            enum Code {
                // Внутренняя ошибка
                INTERNAL_ERROR = 0;
                // Нет прав на запись файла
                PERMISSION_DENIED = 1;
                // Может возникать, когда на файл установлен флаг immutable
                FILE_EXISTS = 2;
                // Невозможно записать файл из-за отсутствия места на диске
                DISK_QUOTA_EXCEEDED = 3;
            }
        }
    }

    enum OrderStatus {
        PROCESSING = 0;
        COMPLETED = 1;
        ERROR = 2;
        // Завершено частично (см. error_details)
        COMPLETED_PARTIALLY = 3;
    }

    enum OrderType {
        DOWNLOAD = 0;
        RESTORE = 1;
    }
}

message PrivateNetwork {
    // Идентификатор сети
    string id = 1;

    // IP адрес подсети, например, 10.0.0.0
    string subnet = 2;

    // Маска подсети
    uint32 mask = 3;
}

message AttachedPrivateNetwork {
    // Сведения о приватной сети
    PrivateNetwork network = 1;

    // IP адреса из вышеуказанной сети
    repeated string ip = 2;
}

message SoftwareMetadata {
    // новое ли ПО
    bool is_new = 1;
    // показываем ли ПО на главной сразу
    bool is_pinned = 2;
    // ссылка на иконку
    string icon = 3;
    // ссылка на иконку побольше
    string icon2x = 4;
    // ссылка на лого(еще больше чем иконки)
    string logo = 5;
    // ссылка на лого(побольше)
    string logo2x = 6;
    // первый цвет градиента в #hex формате
    string primary_color = 7;
    // второй цвет градиента в #hex формате
    string secondary_color = 8;
}

message SoftwareCategory {
    string sys_name = 1;
    // название категории
    string name = 2;
    string name_en = 3;
    bool is_main = 4;
}

message InstalledSoftwareInfo {
    // Внутреннее имя (напр. redmine)
    string name = 1;

    // Отображаемое имя (напр. Redmine)
    string display_name = 2;

    // Версия (напр. 1.0.1)
    string version = 3;

    // Адрес для доступа к ПО через http
    string address = 5;

    // Статус процесса установки ПО
    Status status = 6;

    // Значение полей заполненный при установки ПО
    repeated FieldValue field_value = 7;

    // Метадата
    SoftwareMetadata metadata = 8;

    enum Status {
        PENDING = 0;
        INSTALLING = 1;
        INSTALLED = 2;
        ERROR = 3;
        CANCEL = 4;
    }

    message FieldValue {
        string label_ru = 1;
        string label_en = 2;
        string value = 3;
        Type type = 4;
        string variable = 5;

        enum Type {
            UNKNOWN = 0;
            DOMAIN = 1;
            TEXT = 2;
            EMAIL = 3;
            PASSWORD = 4;
        }
    }

    string description = 10;
    string description_en = 11;

    repeated SoftwareCategory category = 12;
}