syntax = 'proto3';

package beget.vps.v1.backup;

import "google/api/annotations.proto";
import "vps/proto/v1/structures.proto";

service BackupService {
    // Получить историю заданий по восстановлению
    rpc getOrders (GetOrdersRequest) returns (GetOrdersResponse) {
        option (google.api.http) = {
            get: "/v1/vps/backup/orders"
        };
    }

    // Получить список копий доступный для восстановления
    rpc getAvailableCopies (GetAvailableCopiesRequest) returns (GetAvailableCopiesResponse) {
        option (google.api.http) = {
			get: "/v1/vps/backup"
		};
    }

    // Получить список файлов определенного бекапа
    rpc getBackupFileList (GetBackupFileListRequest) returns (GetBackupFileListResponse) {
        option (google.api.http) = {
			get: "/v1/vps/{id}/backup/{copy_id}"
		};
    }

    // Восстановить файл/директорию из бекапа
    rpc restoreFile (RestoreFileRequest) returns (RestoreFileResponse) {
        option (google.api.http) = {
			post: "/v1/vps/{id}/backup/{copy_id}/file"
			body: "*"
		};
    }

    // Восстановить все файлы из определенного бекапа
    rpc restoreServer (RestoreServerRequest) returns (RestoreServerResponse) {
        option (google.api.http) = {
			post: "/v1/vps/{id}/backup/{copy_id}/server"
			body: "*"
		};
    }
}

message GetBackupFileListRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Идентификатор копии
    uint64 copy_id = 2;

    // Путь для отображения
    string path = 3;
}

message GetBackupFileListResponse {
    // Список файлов
    repeated structures.FileInfo file = 1;
}

message GetAvailableCopiesRequest {
}

message GetAvailableCopiesResponse {
    // Список копий
    repeated structures.CopyInfo copy = 1;
}

message RestoreFileRequest {
    // Идентификатор VPS, в формате uuid v4
    string id = 1;

    // Идентификатор копии
    uint64 copy_id = 2;

    // Список путей для восстановления
    repeated string path = 3;

    // Восстановление без выключения VPS
    bool affect_live = 4;

    // Директория, в которую будет происходить восстановление. По-умолчанию - "/"
    string target = 5;
}

message RestoreFileResponse {
    oneof result {
        // Информация о восстановлении
        structures.OrderInfo order = 1;

        // Произошла ошибка при восстановлении файлов
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Указан некорректный режим восстановления
            INVALID_MODE = 1;

            // Передан некорректный список файлов для восстановления
            INVALID_PATH_LIST = 2;

            // Уже существует активная задача на восстановление
            ALREADY_RESTORING = 3;

            // Передан некорректный путь к директории для восстановления
            INVALID_TARGET = 4;
        }
    }
}

message RestoreServerRequest {
    // Идентификатор VPS, в который происходит восстановление, в формате uuid v4
    string id = 1;

    // Идентификатор копии
    uint64 copy_id = 2;
}

message RestoreServerResponse {
    oneof result {
        // Информация о восстановлении
        structures.OrderInfo order = 1;

        // Произошла ошибка при восстановлении файлов
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Уже существует активная задача на восстановление
            ALREADY_RESTORING = 1;

            // Конфигурация целевого сервера не соответствует конфигурации сервера в момент создания резервной копии
            CONFIGURATION_NOT_ENOUGH = 2;
        }
    }
}

message GetOrdersRequest {
    // Количество записей на страницу (от 1 до 100)
    uint32 limit = 1;

    // Смещение относительно нулевой (последней) записи
    uint32 offset = 2;
}

message GetOrdersResponse {
    // История заданий по восстановлению
    repeated structures.OrderInfo order = 1;
}
