syntax = 'proto3';

package beget.vps.v1.manage;

import "google/api/annotations.proto";
import "vps/proto/v1/structures.proto";

service ManageService {
    // Отправляет команду на создание новой Vps и ее запуск (https://jira.beget.ru/browse/BH-327)
    rpc createVps (CreateVpsRequest) returns (CreateVpsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server"
            body: "*"
        };
    }

    // Возвращает досупные варианты конфигурации Vps (список ОС и тарифных планов)
    rpc getAvailableConfiguration (GetAvailableConfigurationRequest) returns (GetAvailableConfigurationResponse) {
        option (google.api.http) = {
            get: "/v1/vps/configuration"
        };
    }

    // Возвращает список Vps с некоторыми параметрами
    rpc getList (GetListRequest) returns (GetListResponse) {
        option (google.api.http) = {
            get: "/v1/vps/server/list"
        };
    }

    // Возвращает статусы всех Vps
    rpc getStatuses (GetStatusesRequest) returns (GetStatusesResponse) {
        option (google.api.http) = {
            get: "/v1/vps/server/statuses"
        };
    }

    // Возвращает информацию по одной конкретной Vps
    rpc getInfo (GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/v1/vps/server/{id}"
        };
    }

    // Отправляет команду на запуск Vps
    rpc startVps (StartVpsRequest) returns (StartVpsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/start"
        };
    }

    // Отправляет команду на остановку Vps
    rpc stopVps (StopVpsRequest) returns (StopVpsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/stop"
        };
    }

    // Отправляет команду на рестарт Vps
    rpc rebootVps (RebootVpsRequest) returns (RebootVpsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/reboot"
        };
    }

    // Отправляет команду на рестарт Vps
    rpc resetVps (ResetVpsRequest) returns (ResetVpsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/reset"
        };
    }

    // Отправляет команду на удаление Vps
    rpc removeVps (RemoveVpsRequest) returns (RemoveVpsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/remove"
        };
    }

    // Отправляет команду на перевод Vps в rescue-режим
    rpc startRescue (StartRescueRequest) returns (StartRescueResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/rescue"
        };
    }

    // Отправляет запрос на отключение rescue-режима и перезагрузку Vps
    rpc stopRescue (StopRescueRequest) returns (StopRescueResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/server/{id}/rescue"
        };
    }

    // Отправляет запрос на смену конфигурации Vps (с перезагрузкой)
    rpc changeConfiguration (ChangeConfigurationRequest) returns (ChangeConfigurationResponse) {
        option (google.api.http) = {
            put: "/v1/vps/server/{id}/configuration"
            body: "*"
        };
    }

    // Отправляет запрос на переустановку ОС (с перезагрузкой и уничтожением всех данных)
    rpc reinstall (ReinstallRequest) returns (ReinstallResponse) {
        option (google.api.http) = {
            post: "/v1/vps/server/{id}/reinstall"
            body: "*"
        };
    }

    // Обновляет информацию о Vps (которая отображается в панели)
    rpc updateInfo (UpdateInfoRequest) returns (UpdateInfoResponse) {
        option (google.api.http) = {
            put: "/v1/vps/server/{id}/info"
            body: "*"
        };
    }

    // Возвращат историю состояний VPS
    rpc getHistory (GetHistoryRequest) returns (GetHistoryResponse) {
        option (google.api.http) = {
            get: "/v1/vps/{id}/history"
        };
    }

    // Добавляет ssh-ключ к VPS
    rpc attachSshKey (AttachSshKeyRequest) returns (AttachSshKeyResponse) {
        option (google.api.http) = {
            post: "/v1/vps/{id}/sshKey/{ssh_key_id}"
        };
    }

    // Удаляет ssh-ключ из VPS
    rpc detachSshKey (DetachSshKeyRequest) returns (DetachSshKeyResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/{id}/sshKey/{ssh_key_id}"
        };
    }

    rpc resetPassword (ResetPasswordRequest) returns (ResetPasswordResponse) {
        option (google.api.http) = {
            put: "/v1/vps/{id}/password"
        };
    }

    // Прикрепление дополнительного IP адреса пользователя к VPS
    rpc attachIpAddress (AttachIpAddressRequest) returns (AttachIpAddressResponse) {
        option (google.api.http) = {
            post: "/v1/vps/{id}/network/{ip_address}"
            body: "*"
        };
    }

    // Открепление дополнительного IP адреса пользователя от VPS
    rpc detachIpAddress (DetachIpAddressRequest) returns (DetachIpAddressResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/network/detach/{ip_address}"
        };
    }

    // Добавляет VPS к приватной сети
    rpc attachToPrivateNetwork (AttachToPrivateNetworkRequest) returns (AttachToPrivateNetworkResponse) {
        option (google.api.http) = {
            post: "/v1/vps/{id}/private-network/{network_id}"
            body: "*"
        };
    }

    // Удаляет VPS из приватной сети
    rpc detachFromPrivateNetwork (DetachFromPrivateNetworkRequest) returns (DetachFromPrivateNetworkResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/{id}/private-network/{network_id}"
        };
    }

    // Изменение возможности доступа к пользовательской машине через SSH-ключи BeGet
    rpc changeSshAccess (ChangeSshAccessRequest) returns (ChangeSshAccessResponse) {
        option (google.api.http) = {
            put: "/v1/vps/{id}/ssh/access"
            body: "*"
        };
    }

    // Возвращает необходимые параметры сессии для перехода в файловый менеджер
    rpc getFileManagerSettings (GetFileManagerSettingsRequest) returns (GetFileManagerSettingsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/{id}/fm"
        };
    }

    // Возвращает список установленного ПО на сервере
    rpc getInstalledSoftware (GetInstalledSoftwareRequest) returns (GetInstalledSoftwareResponse) {
        option (google.api.http) = {
            get: "/v1/vps/{id}/software"
        };
    }

    // Возвращает список доступного для установки ПО
    rpc getSoftwareList (GetSoftwareListRequest) returns (GetSoftwareListResponse) {
        option (google.api.http) = {
            get: "/v1/vps/software"
        };
    }

    rpc checkSoftwareRequirements (CheckSoftwareRequirementsRequest) returns (CheckSoftwareRequirementsResponse) {
        option (google.api.http) = {
            post: "/v1/vps/software/requirements"
            body: "*"
        };
    }

    rpc unarchive (UnarchiveRequest) returns (UnarchiveResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/archive/{id}"
        };
    }

    rpc reserveVpsSubdomain(ReserveVpsSubdomainRequest) returns (ReserveVpsSubdomainResponse) {
        option (google.api.http) = {
            get: "/v1/vps/subdomain/reserve"
        };
    }
}

message CheckSoftwareRequirementsRequest {
    // Информация о желаемом ПО
    SoftwareInstallInfo info = 2;
}

message CheckSoftwareRequirementsResponse {
    Error error = 2;

    message Error {
        DomainError wordpress_error = 1 ; // deprecated, use  domain_error instead

        oneof type {
            DomainError domain_error = 2;
        }

        enum DomainError {
           _ = 0;
           // Домен не зарегистрирован
           DOMAIN_NOT_REGISTERED = 1;
           
           // Домен зарегистрирован через бегет и у него не наши NS-записи
           WRONG_NS_RECORD = 2;

           // Домен зарегистрирован у стороннего регистратора и не делегирован нам
           DOMAIN_NOT_DELEGATED = 3;

           // Переданный домен не является fqdn
           INVALID_DOMAIN = 4;

           // Домен зарегистрирован меньше 12 часов назад
           DOMAIN_IS_NEW = 5;
        }
    }
}

message GetSoftwareListRequest {

}

message GetSoftwareListResponse {
    repeated SoftwareInfo software = 1;

    message SoftwareInfo {
        uint32 id = 1;

        // Внутреннее имя (напр. redmine)
        string name = 2;

        // Отображаемое имя (напр. Redmine)
        string display_name = 3;

        // Версия (напр. 1.0.1)
        string version = 4;

        // Тип ПО (панель управления, обычное ПО)
        Type type = 5;

        // Описание ПО
        string description = 6;

        // Дополнительное описание для конкретной версии ПО
        string description_version = 7;

        // Список ID образов, для которых возможна установка этого ПО
        repeated uint32 image_id = 8;

        // Список дополнительных полей, которые необходимо передать для установки ПО
        repeated string variable = 9;

        // Минимальные требования к конфигурации для установки
        Requirements requirements = 10;

        message Requirements {
            // Количество ядер процессора, шт
            uint32 cpu_count = 1;

            // Размер диска, мб
            uint32 disk_size = 2;

            // Объем оперативной памяти, мб
            uint32 memory = 3;
        }

        enum Type {
            PANEL = 0;
            SOFTWARE = 1;
        }
    }
}

message GetInstalledSoftwareRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message GetInstalledSoftwareResponse {
    structures.InstalledSoftwareInfo software = 1;
}

message CreateVpsRequest {
    // Отображаемое имя Vps (required)
    string display_name = 1;

    // Имя хоста (в ОС)
    string hostname = 2;

    // Дескрипшн (опциональный). просто какой-нить текст
    string description = 3;

    // Идентификатор конфигурации (required)
    string configuration_id = 4;

    oneof source {
        // Идентификатор софта
        SoftwareInstallInfo software = 5;

        // Идентификатор снапшота, который восстановится в новую Vps
        uint64 snapshot_id = 11;
    }

    // ID публичных ssh-ключей (предварительно созданные в системе)
    repeated uint32 ssh_keys = 6;

    // Пароль (должен включать минимум 1 upper, 1 lower, 1 digit, 1 special char. Мин длина - 8 символов)
    string password = 7;

    // Согласие на доступ к пользовательской машине через SSH-ключи BeGet
    // Необходимо для использования пользователем файлового менеджера
    bool beget_ssh_access_allowed = 8;

    // Приватные сети, к которым необходимо подключить VPS
    repeated PrivateNetworkInfo private_networks = 12;
}


message CreateVpsResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        oneof extra {
            SoftwareVariableError variable_error = 3;
        }

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Некорректное поле display_name
            INVALID_DISPLAY_NAME = 1;

            // Некорректное поле hostnames
            INVALID_HOSTNAME = 2;

            // Некорректные остальные параметры конфигурации (public_key, operating_system_id, configuration_name)
            INVALID_PARAMS = 3;

            // Недостаточно средств на счету
            INSUFFICIENT_FUNDS = 4;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 5;

            // Неправильная конфигурация параметров доступа к Vps (не выбран ни логин, ни доступ по ключу)
            INVALID_SECURITY_CONFIGURATION = 6;

            // Некорректное поле password
            INVALID_PASSWORD = 7;

            // Действие в данный момент недоступно
            TEMPORARILY_UNAVAILABLE = 8;

            // Некорректная комбинация типов ПО
            SOFTWARE_INVALID_TYPE = 9;

            // Недостаточно ресурсов на для устанавливаемого ПО на выбранном тарифном плане
            SOFTWARE_NOT_ENOUGH_RESOURCES = 10;

            // Пропущены обязательные переменные для устанавливаемого ПО. Подбробности в
            SOFTWARE_VARIABLE_REQUIRED = 11;

            // Переменная для устанавливаемого ПО. Подробности содержатся в `variable_error`
            SOFTWARE_VARIABLE_INVALID = 12;

            // snapshot creating in progress
            SNAPSHOT_NOT_DONE = 13;

            // snapshot configuration is higher than vps
            SNAPSHOT_NOT_ENOUGH_CONFIGURATION = 14;

            // Некорректная конфигурация приватной сети
            INVALID_PRIVATE_NETWORK_CONFIGURATION = 15;

            // Передан некорректный адрес
            INVALID_ADDRESS = 16;

            // Переданный адрес не соответствует подсети
            ADDRESS_SUBNET_MISMATCH = 17;

            // Переданный адрес уже выделен
            ADDRESS_ALREADY_RESERVED = 18;

            // Переданный адрес недоступен
            ADDRESS_UNAVAILABLE = 19;

            // Пароль содержится в чёрном списке
            BLACKLISTED_PASSWORD = 20;
        }

        message SoftwareVariableError {
            uint32 id = 1;
            repeated ValueError error = 2;

            message ValueError {
                string variable = 1;
                string error_text_ru = 2;
                string error_text_en = 3;
            }
        }
    }
}

message GetListRequest {
}

message GetListResponse {
    repeated VpsInfo vps = 1;
}


message GetInfoRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message GetInfoResponse {
    VpsInfo vps = 1;
}


message GetStatusesRequest {
}

message GetStatusesResponse {
    repeated StatusInfo statuses = 1;

    message StatusInfo {
        // Идентификатор Vps (uuid)
        string id = 1;

        VpsStatus status = 2;

        // Включен rescue-режим
        bool rescue_mode = 3;

        // VPS находится в состоянии миграции на другой хост
        bool migrating = 4;

        // Доступно ли управление VPS
        bool manage_enabled = 5;

        // VPS находится в состоянии восстановления из резервной копии
        bool restoring = 6;

        // VPS заархивирована, управление невозможно
        bool archived = 7;

        // VPS разблокируется после отключения по оплате или архивации
        bool unblocking = 8;

        // VPS в процессе разархивации
        bool unarchiving = 9;
    }
}

message StartVpsRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message StartVpsResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message StopVpsRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message StopVpsResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message RebootVpsRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message RebootVpsResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message ResetVpsRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message ResetVpsResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message RemoveVpsRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message RemoveVpsResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message StartRescueRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message StartRescueResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message StopRescueRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message StopRescueResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;
        }
    }
}

message ChangeConfigurationRequest {
    // Идентификатор Vps (uuid)
    string id = 1;

    // Идентификатор конфигурации
    string configuration_id = 2;
}

message ChangeConfigurationResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;

            // Недостаточно средств на счету
            INSUFFICIENT_FUNDS = 3;

            // Переданная конфигурация не может быть применена из-за ограничений (например, в ней меньше ресурсов, чем в текущей)
            INVALID_CONFIGURATION = 4;

            // Действие в данный момент недоступно
            TEMPORARILY_UNAVAILABLE = 5;
        }
    }
}

message ReinstallRequest {
    // Идентификатор Vps (uuid)
    string id = 1;

    // ID публичных ssh-ключей (предварительно созданные в системе)
    repeated uint32 ssh_keys = 3;

    // Пароль (должен включать минимум 1 upper, 1 lower, 1 digit, 1 special char. Мин длина - 8 символов)
    string password = 4;

    // Информация о ПО, которое необходимо установить
    SoftwareInstallInfo software = 6;
}

message ReinstallResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        oneof extra {
            SoftwareVariableError variable_error = 3;
        }

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Операция не может быть выполнена, т.к. Vps находится в невалидном состоянии (например, сейчас перезапускается)
            INVALID_STATE = 1;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 2;

            // Переданная конфигурация не может быть применена из-за ограничений
            INVALID_CONFIGURATION = 3;

            // Неправильная конфигурация параметров доступа к Vps (не выбран ни логин, ни доступ по ключу)
            INVALID_SECURITY_CONFIGURATION = 4;

            // Некорректное поле password
            INVALID_PASSWORD = 5;

            // Некорректная комбинация типов ПО
            SOFTWARE_INVALID_TYPE = 6;

            // Недостаточно ресурсов на для устанавливаемого ПО на выбранном тарифном плане
            SOFTWARE_NOT_ENOUGH_RESOURCES = 7;

            // Некорректные остальные параметры конфигурации (public_key, operating_system_id, configuration_name)
            INVALID_PARAMS = 8;

            // Пропущены обязательные переменные для устанавливаемого ПО
            SOFTWARE_VARIABLE_REQUIRED = 9;

            // Переменная для устанавливаемого ПО. Подробности содержатся в `variable_error`
            SOFTWARE_VARIABLE_INVALID = 10;

            // Пароль содержится в чёрном списке
            BLACKLISTED_PASSWORD = 11;
        }

        message SoftwareVariableError {
            uint32 id = 1;
            repeated ValueError error = 2;

            message ValueError {
                string variable = 1;
                string error_text_ru = 2;
                string error_text_en = 3;
            }
        }
    }
}

message GetAvailableConfigurationRequest {
}

message GetAvailableConfigurationResponse {
    repeated VpsConfiguration configurations = 1;
}


message UpdateInfoRequest {
    // Идентификатор Vps (uuid)
    string id = 1;

    // Отображаемое имя Vps
    string display_name = 2;

    // Имя хоста (в ОС)
    string hostname = 3;

    // Дескрипшн
    string description = 4;
}

message UpdateInfoResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Некорректное поле display_name
            INVALID_DISPLAY_NAME = 1;

            // Некорректное поле hostnames
            INVALID_HOSTNAME = 2;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 3;
        }
    }
}

message GetHistoryRequest {
    string id = 1;
}

message GetHistoryResponse {
    repeated HistoryItem history = 1;
}

message AttachSshKeyRequest {
    // Идентификатор Vps (uuid)
    string id = 1;

    // ID публичного ключа
    uint32 ssh_key_id = 2;
}

message AttachSshKeyResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 1;
        }
    }
}

message DetachSshKeyRequest {
    // Идентификатор Vps (uuid)
    string id = 1;

    // ID публичного ключа
    uint32 ssh_key_id = 2;
}

message DetachSshKeyResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 1;
        }
    }
}

message ResetPasswordRequest {
    // Идентификатор Vps (uuid)
    string id = 1;
}

message ResetPasswordResponse {
    oneof result {
        VpsInfo vps = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            // Внутренняя ошибка (извиняемся и просим повторить попозже)
            INTERNAL_ERROR = 0;

            // Пользователю заблокирован доступ к управлению Vps
            SERVICE_DISABLED = 1;
        }
    }
}


message HistoryItem {
    string date = 1;

    HistoryItemType type = 2;

    bool has_error = 3;

    enum HistoryItemType {
        UNKNOWN = 0;
        CREATE = 1;
        START = 2;
        STOP = 3;
        RESTART = 4;
        REINSTALL = 5;
        RECONFIGURE = 6;
        REMOVE = 7;
    }
}

message VpsInfo {
    // Идентификатор Vps (uuid)
    string id = 1;

    // ЧПУ-френдли имя Vps (может быть пустой строкой)
    string slug = 2;

    // Отображаемое имя Vps
    string display_name = 3;

    // Имя хоста (в ОС)
    string hostname = 4;

    // Конфигурация Vps
    VpsConfiguration configuration = 5;

    // Текущий статус Vps
    VpsStatus status = 6;

    // Информация об ssh-ключах
    repeated structures.SshKeyInfo ssh_keys = 7;

    // Возможен ли вход по паролю
    bool has_password = 8;

    // Доступно ли управление данной Vps
    bool manage_enabled = 9;

    // Дескрипшн для пользователя
    string description = 10;

    // Дата создания (в формате W3C)
    string date_create = 11;

    // Основной IP-адрес
    string ip_address = 13;

    // Включен rescue-режим
    bool rescue_mode = 14;

    // VPS находится в состоянии миграции на другой хост
    bool migrating = 15;

    // Нет возможности получать информацию с хоста, на котором находится vps
    bool host_unavailable = 16;

    // VPS находится в состоянии разблокировки
    bool unblocking = 17;

    // VPS находится в состоянии восстановления из резервной копии
    bool restoring = 20;

    // Занято места на главном разделе, Мб
    uint64 disk_used = 21;

    // Осталось свободного места на главном разделе, Мб
    uint64 disk_left = 22;

    // Информация о дополнительных IP-адресах VPS
    repeated string additional_ip_address = 18;

    // Согласие на доступ к пользовательской машине через SSH-ключи BeGet
    // Необходимо для использования пользователем файлового менеджера
    bool beget_ssh_access_allowed = 19;

    // VPS заархивирована, управление невозможно
    bool archived = 23;

    // VPS в процессе разархивации
    bool unarchiving = 24;

    // Приватные сети к которым подключена VPS
    repeated structures.AttachedPrivateNetwork private_network = 25;

    // технический домен, если он есть
    string technical_domain = 26;

    // домен, указанный при установке софта
    string software_domain = 27;

    structures.InstalledSoftwareInfo software = 28;
}

// Текущий статус Vps
enum VpsStatus {
    UNKNOWN = 0;
    CREATING = 1;
    RUNNING = 2;
    STOPPING = 3;
    RESTARTING = 4;
    REMOVING = 5;
    REMOVED = 6;
    STOPPED = 7;
    STARTING = 8;
    RECONFIGURING = 9;
    REINSTALLING = 10;
}

// Описывает параметры Vps
message VpsConfiguration {
    // Идентификатор конфигурации
    string id = 1;

    // Имя конфигурации Vps
    string name = 2;

    // Количество ядер процессора, шт
    uint32 cpu_count = 3;

    // Объем дисковой квоты, Мб
    uint32 disk_size = 4;

    // Объем оперативной памяти, Мб
    uint32 memory = 5;

    // Цена в день
    double price_day = 6;

    // Цена в месяц
    double price_month = 7;

    // Доступен ли для заказа пользователем
    bool available = 8;

    // Является ли конфигурация персональной
    bool custom = 9;
}

message AttachIpAddressRequest {
    // Идентификатор VPS
    string id = 1;

    // IP-адрес
    string ip_address = 2;
}

message AttachIpAddressResponse {
    oneof result {
        // Успешное прикрепление дополнительного IP-адреса
        VpsInfo vps = 1;

        // Произошла ошибка при прикреплении дополнительного IP-адреса
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Произошла ошибка при добавлении дополнительного IP адреса внутри гостевой ОС
            GUEST_OS_ADD_IP_ADDRESS_FAILED = 1;
        }
    }
}

message DetachIpAddressRequest {
    // IP-адрес
    string ip_address = 1;
}

message DetachIpAddressResponse {
    oneof result {
        // Успешное открепление дополнительного IP-адреса
        VpsInfo vps = 1;

        // Произошла ошибка при откреплении дополнительного IP-адреса
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Произошла ошибка при удалении дополнительного IP адреса внутри гостевой ОС
            GUEST_OS_REMOVE_IP_ADDRESS_FAILED = 1;
        }
    }
}

message AttachToPrivateNetworkRequest {
    // Идентификатор VPS
    string id = 1;

    // Идентификатор сети
    string network_id = 2;

    // желаемый ip-адрес. Если пустая строка, то выберется случайный
    string address = 3;
}

message AttachToPrivateNetworkResponse {
    oneof result {
        // Успешное добавление к приватной сети
        VpsInfo vps = 1;

        // Произошла ошибка при добавлении к приватной сети
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Произошла ошибка при попытке внести изменения в конфигурацию адаптеров в гостевой ОС
            GUEST_OS_ERROR = 1;

            // В приватной сети не осталось свободных адресов
            NO_AVAILABLE_ADDRESSES = 2;

            // Передан некорректный адрес
            INVALID_ADDRESS = 3;

            // Переданный адрес не соответствует подсети
            ADDRESS_SUBNET_MISMATCH = 4;

            // Переданный адрес уже выделен
            ADDRESS_ALREADY_RESERVED = 5;

            // Переданный адрес недоступен
            ADDRESS_UNAVAILABLE = 6;
        }
    }
}

message DetachFromPrivateNetworkRequest {
    // Идентификатор VPS
    string id = 1;

    // Идентификатор сети
    string network_id = 2;
}

message DetachFromPrivateNetworkResponse {
    oneof result {
        // Успешное удаление из приватной сети
        VpsInfo vps = 1;

        // Произошла ошибка при удалении из приватной сети
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Произошла ошибка при попытке внести изменения в конфигурацию адаптеров в гостевой ОС
            GUEST_OS_ERROR = 1;
        }
    }
}

message ChangeSshAccessRequest {
    // Идентификатор VPS
    string id = 1;

    // Согласие на доступ к пользовательской машине через SSH-ключи BeGet
    // Необходимо для использования пользователем файлового менеджера
    bool beget_ssh_access_allowed = 2;
}

message ChangeSshAccessResponse {
    oneof result {
        // Успешное открепление дополнительного IP-адреса
        VpsInfo vps = 1;

        // Произошла ошибка при откреплении дополнительного IP-адреса
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        // Дополнительная информация
        string extra = 3;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Произошла ошибка при попытке внести изменения в authorized_keys в гостевой ОС
            GUEST_OS_ERROR = 1;
        }
    }
}

message GetFileManagerSettingsRequest {
    // Vps uuid
    string id = 1;
}

message GetFileManagerSettingsResponse {
    oneof result {
        Credentials credentials = 1;
        Error error = 2;
    }

    message Credentials {
        string type = 1;
        string user = 2;
        string host = 3;
        uint32 connection_id = 4;
        string path = 5;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка
            INTERNAL_ERROR = 0;

            // Доступ к серверу по ssh для бегета запрещен
            SSH_ACCESS_NOT_ALLOWED = 1;
        }
    }
}

message SoftwareInstallInfo {
    // ID устанавливаемого ПО
    uint32 id = 1;
    // Дополнительные переменные для установки
    map<string,string> variable = 2;
}

message UnarchiveRequest {
    // Vps uuid
    string id = 1;
}

message UnarchiveResponse {
    VpsInfo vps = 1;
}

message PrivateNetworkInfo {
    // ID сети
    string id = 1;
    // желаемый ip-адрес. Если пустая строка, то выберется случайный
    string address = 2;
}


message ReserveVpsSubdomainRequest {
}

message ReserveVpsSubdomainResponse {
    oneof result {
        string vps_subdomain = 1;
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка
            INTERNAL_ERROR = 0;

            // Поддомен уже зарезервирован
            SUBDOMAIN_RESERVED = 1;
        }
    }
}
