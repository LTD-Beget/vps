syntax = 'proto3';

package beget.vps.v1.snapshot;

import "google/api/annotations.proto";
import "vps/proto/v1/structures.proto";

service SnapshotService {
    // get all snapshots
    rpc getAll (GetAllRequest) returns (GetAllResponse) {
        option (google.api.http) = {
            get: "/v1/vps/snapshot"
        };
    }

    // create a snapshot
    rpc create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/vps/snapshot"
            body: "*"
        };
    }

    // create cost calculator for snapshot creating
    rpc createCalculator (CreateCalculatorRequest) returns (CreateCalculatorResponse) {
        option (google.api.http) = {
            post: "/v1/vps/snapshot/calculator"
            body: "*"
        };
    }

    // get restore list
    rpc getAllRestores (GetAllRestoresRequest) returns (GetAllRestoresResponse) {
        option (google.api.http) = {
            get: "/v1/vps/snapshot/restore"
        };
    }

    // create a restore for the snapshot
    rpc restore (RestoreRequest) returns (RestoreResponse) {
        option (google.api.http) = {
            post: "/v1/vps/snapshot/{id}/restore"
            body: "*"
        };
    }

    // remove the snapshot
    rpc remove (RemoveRequest) returns (RemoveResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/snapshot/{id}"
        };
    }

    // edit snapshot user fields
    rpc edit (EditRequest) returns (EditResponse) {
        option (google.api.http) = {
            put: "/v1/vps/snapshot/{id}"
            body: "*"
        };
    }
}

message GetAllRequest {
}

message GetAllResponse {
    repeated Snapshot snapshot = 1;
}

message CreateRequest {
    // vps id (uuid)
    string vps_id = 1;

    // user title for snapshot
    string description = 2;

    // stop vps before snapshot?
    bool consistent = 3;
}

message CreateResponse {
    oneof response {
        Snapshot snapshot = 1;
        Error error = 2;
    }
    message Error {
        string message = 1;
        Code code = 2;
        enum Code {
            INTERNAL_ERROR = 0;

            // already creating this vps snapshot
            ALREADY_CREATING = 1;

            // must be positive balance
            INSUFFICIENT_FUNDS = 2;
        }
    }
}

message CreateCalculatorRequest {
    // vps id (uuid)
    string vps_id = 2;
}

message CreateCalculatorResponse {
    // cost per day in rub
    double price_day = 10;
}

message GetAllRestoresRequest {
    // snapshot id. Optional, full list at 0
    uint64 id = 1;
}

message GetAllRestoresResponse {
    repeated Restore restore = 1;
}

message RestoreRequest {
    // snapshot id
    uint64 id = 1;

    // target vps to restore
    string vps_id = 2;
}

message RestoreResponse {
    oneof response {
        Restore restore = 1;
        Error error = 2;
    }
    message Error {
        string message = 1;
        Code code = 2;
        enum Code {
            INTERNAL_ERROR = 0;

            // snapshot already in restoring with this target
            ALREADY_RESTORING = 1;

            // snapshot creating in progress
            SNAPSHOT_NOT_DONE = 2;

            // saved snapshot configuration is higher than target
            CONFIGURATION_NOT_ENOUGH = 3;
        }
    }
}

message RemoveRequest {
    // snapshot id
    uint64 id = 1;
}

message RemoveResponse {
    oneof response {
        Snapshot snapshot = 1;
        Error error = 2;
    }
    message Error {
        string message = 1;
        Code code = 2;
        enum Code {
            INTERNAL_ERROR = 0;

            // snapshot is creating or restoring or removing
            SNAPSHOT_NOT_DONE = 1;

            // snapshot now in restoring
            SNAPSHOT_IS_RESTORING = 2;
        }
    }
}

message EditRequest {
    // snapshot id
    uint64 id = 1;

    // user title for snapshot
    string description = 2;
}

message EditResponse {
    // snapshot
    Snapshot snapshot = 1;
}

message Snapshot {
    // snapshot id
    uint64 id = 1;

    // vps id (uuid)
    string vps_id = 2;

    // vps name
    string vps_name = 3;

    // snapshot create date W3C
    string date_create = 4;

    // bytes
    uint64 size = 5;

    // current snapshot status
    Status status = 6;

    // source vps OS info at create time
    structures.OperatingSystem operating_system = 7;

    // user title for snapshot
    string description = 8;

    // required vps configuration for restoring
    RequiredConfiguration configuration = 9;

    // cost per day in rub
    double price_day = 10;

    enum Status {
        CREATING = 0;
        DONE = 1;
        RESTORING = 2;
        DELETED = 3;
    }
}

message Restore {
    // restore order id
    uint64 id = 1;

    // source snapshot
    Snapshot snapshot = 2;

    // target vps id
    string vps_id = 3;

    // target vps name
    string vps_name = 4;

    // start restore datetime (RFC3339)
    string date_create = 5;

    // finish restore datetime (RFC3339)
    string date_finish = 6;

    // current restore status
    Status status = 7;

    enum TargetType {
        // restore to existing vps
        EXISTING_VPS = 0;

        // create vps from snapshot
        NEW_VPS = 1;
    }

    enum Status {
        // in create process
        PROCESSING = 0;

        // finished
        COMPLETED = 1;
    }
}

message RequiredConfiguration {
    // CPU cores
    uint32 cpu_count = 1;

    // disk size, Mb
    uint32 disk_size = 2;

    // RAM, Mb
    uint32 memory = 3;
}