syntax = 'proto3';

package beget.vps.v1.snapshot;

import "google/api/annotations.proto";
import "vps/proto/v1/structures.proto";

// Снапшоты сервера
//
// Предоставляет набор методов для работы со снапшотами облачных серверов.
service SnapshotService {
    // Получить список снапшотов
    //
    // Возвращает список всех снапшотов созданных на текущем аккаунте.
    rpc getAll(GetAllRequest) returns (GetAllResponse) {
        option (google.api.http) = {
            get: "/v1/vps/snapshot"
        };
    }

    // Создать новый снапшот
    //
    // Создаёт новый снапшот для указанного сервера.
    //
    // Для получения доступных идентификаторов VPS `vps_id` необходимо использовать метод
    // "Получить список VPS" из API "Облачные серверы".
    rpc create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/vps/snapshot"
            body: "*"
        };
    }

    // Узнать стоимость снапшота для конкретной VPS
    //
    // Возвращает стоимость снапшота для указанного сервера.
    //
    // Для получения доступных идентификаторов VPS `vps_id` необходимо использовать метод
    // "Получить список VPS" из API "Облачные серверы".
    rpc createCalculator(CreateCalculatorRequest) returns (CreateCalculatorResponse) {
        option (google.api.http) = {
            post: "/v1/vps/snapshot/calculator"
            body: "*"
        };
    }

    // Получить историю восстановлений из снапшота
    //
    // Возвращает историю восстановлений из всех снапшотов или по указанному снапшоту
    // (если передан идентификаторов снапшота `id` в запросе).
    //
    // Для получения доступных идентификаторов снапшотов `id` необходимо использовать метод
    // "Получить список снапшотов" из API "Облачные серверы".
    rpc getAllRestores(GetAllRestoresRequest) returns (GetAllRestoresResponse) {
        option (google.api.http) = {
            get: "/v1/vps/snapshot/restore"
        };
    }

    // Восстановить сервер из снапшота
    //
    // Восстанавливает сервер из указанного снапшота.
    //
    // Для получения доступных идентификаторов снапшотов `id` необходимо использовать метод
    // "Получить список снапшотов" из API "Облачные серверы".
    //
    // Для получения доступных идентификаторов VPS `vps_id` необходимо использовать метод
    // "Получить список VPS" из API "Облачные серверы".
    rpc restore(RestoreRequest) returns (RestoreResponse) {
        option (google.api.http) = {
            post: "/v1/vps/snapshot/{id}/restore"
            body: "*"
        };
    }

    // Удалить снапшот
    //
    // Удаляет указанный снапшот.
    //
    // Для получения доступных идентификаторов снапшотов `id` необходимо использовать метод
    // "Получить список снапшотов" из API "Облачные серверы".
    rpc remove(RemoveRequest) returns (RemoveResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/snapshot/{id}"
        };
    }

    // Изменить описание снапшота
    //
    // Изменяет описание указанного снапшота.
    //
    // Для получения доступных идентификаторов снапшотов `id` необходимо использовать метод
    // "Получить список снапшотов" из API "Облачные серверы".
    rpc edit(EditRequest) returns (EditResponse) {
        option (google.api.http) = {
            put: "/v1/vps/snapshot/{id}"
            body: "*"
        };
    }
}

message GetAllRequest {
}

message GetAllResponse {
    // Информация о снапшотах
    repeated Snapshot snapshot = 1;
}

message CreateRequest {
    // Идентификатор VPS в формате uuid v4
    string vps_id = 1;

    // Описание снапшота (необязательное поле)
    string description = 2;

    // Остановить сервер на время создания снапшота
    bool consistent = 3;
}

message CreateResponse {
    oneof response {
        // Информация о снапшоте
        Snapshot snapshot = 1;

        // Произошла ошибка при создании снапшота
        Error error = 2;
    }
    message Error {
        // Сообщение об ошибке
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Внутренняя ошибка
            INTERNAL_ERROR = 0;

            // Для данной VPS уже создается снапшот
            ALREADY_CREATING = 1;

            // Недостаточно денег на балансе для создания снапшота
            INSUFFICIENT_FUNDS = 2;

            // В данном статусе VPS невозможно создать снапшот (VPS не в статусе running/stopped)
            UNSUITABLE_VPS_STATUS = 3;
        }
    }
}

message CreateCalculatorRequest {
    // Идентификатор VPS в формате uuid v4
    string vps_id = 2;
}

message CreateCalculatorResponse {
    // Стоимость снапшота за один день в рублях
    double price_day = 1;

    // Стоимость одного Гб за один день в рублях
    double price_day_gb = 2;

    // Количество Гб у данной VPS
    uint32 size = 3;
}

message GetAllRestoresRequest {
    // Идентификатор снапшота (необязательное поле)
    uint64 id = 1;
}

message GetAllRestoresResponse {
    // Информация о восстановлении
    repeated Restore restore = 1;
}

message RestoreRequest {
    // Идентификатор снапшота
    uint64 id = 1;

    // Идентификатор VPS в формате uuid v4
    string vps_id = 2;
}

message RestoreResponse {
    oneof response {
        // Информация о восстановлении
        Restore restore = 1;

        // Произошла ошибка при создании заявки на восстановление снапшота
        Error error = 2;
    }
    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Внутренняя ошибка
            INTERNAL_ERROR = 0;

            // Снапшот в процессе создания
            SNAPSHOT_NOT_DONE = 2;

            // Конфигурация VPS не подходит для данного снапшота
            CONFIGURATION_NOT_ENOUGH = 3;

            // В данном статусе VPS невозможно восстановить снапшот (VPS не в статусе running/stopped)
            UNSUITABLE_VPS_STATUS = 4;
        }
    }
}

message RemoveRequest {
    // Идентификатор снапшота
    uint64 id = 1;
}

message RemoveResponse {
    oneof response {
        // Информация о снапшоте
        Snapshot snapshot = 1;

        // Ошибка при удалении снапшота
        Error error = 2;
    }
    message Error {
        // Описание ошибки
        string message = 1;

        // Код ошибки
        Code code = 2;

        enum Code {
            // Внутренняя ошибка
            INTERNAL_ERROR = 0;

            // Удаление снапшота в данном статусе невозможно (находится в статусе creating/restoring/removing)
            SNAPSHOT_NOT_DONE = 1;

            // Из данного снапшота происходит восстановление данных
            SNAPSHOT_IS_RESTORING = 2;
        }
    }
}

message EditRequest {
    // Идентификатор снапшота
    uint64 id = 1;

    // Описание снапшота
    string description = 2;
}

message EditResponse {
    // Информация о снапшоте
    Snapshot snapshot = 1;
}

message Snapshot {
    // Идентификатор снапшота
    uint64 id = 1;

    // Идентификатор VPS в формате uuid v4
    string vps_id = 2;

    // Имя VPS
    string vps_name = 3;

    // Дата создания снапшота в формате W3C
    string date_create = 4;

    // Размер снапшота
    uint64 size = 5;

    // Статус снапшота
    Status status = 6;

    // Описание снапшота
    string description = 8;

    // Необходимая конфигурация VPS для восстановления снапшота
    RequiredConfiguration configuration = 9;

    // Стоимость снапшота за один день в рублях
    double price_day = 10;

    enum Status {
        // Создание
        CREATING = 0;

        // Создан
        DONE = 1;

        // Восстанавливается
        RESTORING = 2;

        // Удален
        DELETED = 3;
    }

    // ПО, которое было установлено на момент создания снапшота
    structures.InstalledSoftwareInfo installed_software = 11;
}

message Restore {
    // Идентификатор заявки на восстановление
    uint64 id = 1;

    // Информация о снапшоте
    Snapshot snapshot = 2;

    // Идентификатор VPS на которую происходит восстановление
    string vps_id = 3;

    // Имя VPS на которую происходит восстановление
    string vps_name = 4;

    // Тип восстановления (на существующую или новую VPS)
    TargetType target_type = 5;

    // Дата начала восстановление, в формате RFC3339
    string date_create = 6;

    // Дата окончания восстановление, в формате RFC3339
    string date_complete = 7;

    // Текущий статус восстановления
    Status status = 8;

    enum TargetType {
        // Существующая VPS
        EXISTING_VPS = 0;

        // Новая VPS
        NEW_VPS = 1;
    }

    enum Status {
        // В процессе восстановления
        PROCESSING = 0;

        // Восстановление завершено
        COMPLETED = 1;
    }
}

message RequiredConfiguration {
    // Количество ядер процессора
    uint32 cpu_count = 1;

    // Размер диска в Mb
    uint32 disk_size = 2;

    // Размер оперативной памяти в Mb
    uint32 memory = 3;
}
