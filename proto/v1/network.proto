syntax = 'proto3';

package beget.vps.v1.network;

import "google/api/annotations.proto";
import "vps/proto/v1/structures.proto";

// Управление сетью
//
// Предоставляет набор методов для работы с публичными IP-адресами и приватными сетями
// облачных серверов.
service NetworkService {
    // Заказать дополнительный IP-адрес
    //
    // Производит заказ нового публичного адреса. При указании идентификатора VPS `id` IP-адрес будет
    // прикреплён к этому серверу.
    //
    // Для получения доступных идентификаторов VPS `id` необходимо использовать метод
    // "Получить список VPS" из API "Облачные серверы".
    rpc orderIpAddress(OrderIpAddressRequest) returns (OrderIpAddressResponse) {
        option (google.api.http) = {
            post: "/v1/vps/network"
            body: "*"
        };
    }

    // Удалить дополнительный IP-адрес
    //
    // Удаляет дополнительный IP-адрес с аккаунта.
    //
    // Для получения доступных IP-адресов `ip_address` необходимо использовать метод
    // "Получить информацию об IP-адресах и сетях" из API "Облачные серверы".
    rpc removeIpAddress(RemoveIpAddressRequest) returns (RemoveIpAddressResponse) {
        option (google.api.http) = {
            delete: "/v1/vps/network/{ip_address}"
        };
    }

    // Получить информацию об IP-адресах и сетях
    //
    // Возвращает информацию по основным и дополнительным публичным IP-адресам, а также по приватным сетям
    // на текущем аккаунте.
    rpc getNetworkInfo(GetNetworkInfoRequest) returns (GetNetworkInfoResponse) {
        option (google.api.http) = {
            get: "/v1/vps/network"
        };
    }

    // Создать приватную сеть
    //
    // Создаёт новую приватную сеть для аккаунта.
    rpc createPrivateNetwork(CreatePrivateNetworkRequest) returns (CreatePrivateNetworkResponse) {
        option (google.api.http) = {
            post: "/v1/vps/private-network"
            body: "*"
        };
    }

    // Получить IP-адрес из приватной сети
    //
    // Возвращает рекомендуемый IP-адрес для конкретного сервера в указанной сети. Адрес в сети
    // при этом не резервируется.
    //
    // Для получения доступных идентификаторов сети `network_id` необходимо использовать метод
    // "Получить информацию об IP-адресах и сетях" из API "Облачные серверы".
    //
    // Для получения доступных идентификаторов VPS `vps_id` необходимо использовать метод
    // "Получить список VPS" из API "Облачные серверы".
    rpc suggestPrivateAddress(SuggestPrivateAddressRequest) returns (SuggestPrivateAddressResponse) {
        option (google.api.http) = {
            post: "/v1/vps/private-network/{network_id}/suggested-address"
            body: "*"
        };
    }
}

message OrderIpAddressRequest {
    // Идентификатор VPS в формате uuid v4.
    // IP-адрес будет выделен в регионе размещения VPS.
    // Если не передать id, то адрес будет выделен в регионе 'ru1'
    string id = 1;
}

message OrderIpAddressResponse {
    // [УСТАРЕЛО]. Результат запроса
    oneof result {
        // [УСТАРЕЛО]. Результат запроса: IP-адрес
        string ip_address = 1;

        // [УСТАРЕЛО]. Результат запроса: произошла ошибка при заказе дополнительного IP-адреса
        Error error = 2;
    }

    // Результат запроса
    oneof result_v2 {
        // Результат запроса: информация о выделенном IP-адресе
        structures.AdditionalIpInfo additional_ip = 3;

        // Результат запроса: произошла ошибка при заказе дополнительного IP-адреса
        Error error_v2 = 4;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Недостаточно средств на счету
            INSUFFICIENT_FUNDS = 1;

            // Достигнут лимит резервации IP-адресов для пользователя
            CUSTOMER_IP_LIMIT_REACHED = 2;

            // Произошла ошибка при добавлении дополнительного IP-адреса внутри гостевой ОС
            GUEST_OS_ADD_IP_ADDRESS_FAILED = 3;
        }
    }
}

message RemoveIpAddressRequest {
    // IP-адрес
    string ip_address = 1;
}

message RemoveIpAddressResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: IP-адрес
        string ip_address = 1;

        // Результат запроса: произошла ошибка при заказе дополнительного IP-адреса
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Произошла ошибка при удалении дополнительного IP-адреса внутри гостевой ОС
            GUEST_OS_REMOVE_IP_ADDRESS_FAILED = 1;
        }
    }
}

message GetNetworkInfoRequest {}

message GetNetworkInfoResponse {
    // Основные публичные IP-адреса серверов
    repeated structures.IpInfo ip = 1;

    // Дополнительные публичные IP-адреса для серверов
    repeated structures.AdditionalIpInfo additional_ip = 2;

    // Приватные сети пользователя
    repeated structures.PrivateNetwork private_network = 3;
}

message CreatePrivateNetworkRequest {
    // Регион создания приватной сети. По-умолчанию: ru1
    string region = 1;
}

message CreatePrivateNetworkResponse {
    // Результат запроса
    oneof result {
        // Результат запроса: информация о приватной сети
        structures.PrivateNetwork network = 1;

        // Результат запроса: произошла ошибка при создании приватной сети
        Error error = 2;
    }

    message Error {
        // Код ошибки
        Code code = 1;

        // Сообщение об ошибке
        string message = 2;

        enum Code {
            // Внутренняя ошибка сервера
            INTERNAL_ERROR = 0;

            // Достигнут лимит на число приватных сетей для пользователя
            LIMIT_REACHED = 1;
        }
    }
}

message SuggestPrivateAddressRequest {
    // Идентификатор приватной сети
    string network_id = 1;

    // Идентификатор VPS в формате uuid v4
    string vps_id = 2;
}

message SuggestPrivateAddressResponse {
    // IP-адрес приватной сети
    string ip = 1;
}
